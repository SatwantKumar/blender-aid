"""
    The Blender-aid API.
    
    Example:
        server = blenderaidapi.Server(("localhost", 8080))
        productions = server.getProductions()
        for production in productions:
            print(production.name)
            files = production.getFiles()
            for file in files:
                print(file.location)
                
    Example2:
        server = blenderaidapi.Server(("localhost", 8080))
        production = server.getProductions()[0]
        production.getFiles(location="chars/frankie.blend")[0].rename("momo.blend")
    
"""
# the blender-aid API
# httplib if < python 3.0
# anders http.client

import httplib
import json
import os

class BlenderAidException(Exception):
    """
        Base Exception class to be used for exception management.
    """
    def __init__(self, message):
        self.message = message
        
    def __str__(self):
        """
            Display string of the object.
        """
        return str(self.message)

def request(binding, servicename, requestParams):
    """
        Internal method used to send a request to the server with servicename 
        and requestParams. The server response is returneds.
        
        This method does:
            1. translate the requestParams to a JSON string
            2. send the JSON string to the server/servicename
            3. receive the JSON response string
            4. translate the JSON response to the result
    """
    # 1
    request = json.dumps(requestParams)+"\r\n"
    # 2
    connection = httplib.HTTPConnection(binding[0], binding[1])
    connection.request("POST", "/service/" + servicename, request)
    # 3
    response = connection.getresponse()
    responseBytes = response.read()
    connection.close()
    # 4:
    result = json.loads(responseBytes)
    return result

class Server:
    """
        Server is the entry class to access Blender-aid functionality from
        other python sources.
        
        It can be used to automate and integrate Blender-aid into your
        production pipeline.
        
        Fields:
            binding - server binding
    """
    def __init__(self, binding):
        """
            Usage:
            server = blenderaidapi.Server(("127.0.0.1", 8080))
        """
        self.binding = binding
        
    def getProductions(self, name=None, workfolder=None):
        """
            Receive productions configured on the server matching the given name and
            workfolder. When None these will be ignored.
            
            Result is an array with Production classes, or an Exception.
        """
        response = request(self.binding, "productions", [])
        result = []
        for jsonProduction in response:
            add = True
            if name is not None and jsonProduction["production_name"].find(name) == -1:
                add = False
            if workfolder is not None and jsonProduction["production_location"].find(workfolder) == -1:
                add = False

            if add:
                result.append(Production(self, jsonProduction))

        return result
    
    def getActiveProduction(self):
        """
            Get the active production.
            Returns the active Production or None, when no production is active.

            To refactor a production, the production must be active.
        """
        response = request(self.binding, "productionview", {})
        if len(response) == 0:
            return None
        else:
            return Production(self, response[0])
        

    def addProduction(self, name, location, svnUrl=None, svnUserid=None, svnPassword=None):
        """
            Register a production to blender-aid.
            
            Note: the new production id generated by the database
            is not updated. The production should be re-read.

            Note: exception handling not implemented yet.
        """
        return request(self.binding, "addproduction", {
            "production_name":name,
            "production_location":location,
            "production_svnurl":svnUrl,
            "production_svnusername":svnUserid,
            "production_svnpassword":svnPassword
        })
        
    def removeProduction(self, production):
        """
            Unregister a production from blender-aid.
        """
        return request(self.binding, "removeproduction", {
            "production_id":production.id
        })

class RefactoringTask:
    """
        A single task in a refactoring process.
        
        Fields:
            server  - instance of the server object
            process - instance of refactoringprocess object
            display - display of the task
            status  - state of the task
            file_id - id of the file that the task effects
            file_location - location of the file of the task
            description - description of the task
    """
    def __init__(self, server, process, json) :
        """
            Initialize the RefactoringTask object.
        """
        self.server = server
        self.process = process
        self.display = json["task_display"]
        self.status = json["task_status"]
        self.file_id = json["file_id"]
        self.file_location = json["file_location"]
        self.description = json["task_description"]
        
    def __str__(self):
        """
            Display the task as a string.
        """
        return self.description

class RefactoringProcess:
    """
        Container holding all tasks of a refactoring process.
        
        Fields:
            server  - instance of the server object
            tasks   - list of tasks to be performed
    """
    def __init__(self, server):
        """
            Initialize the RefactoringProcess object.
        """
        self.server = server
        self.update()
        
    def update(self):
        """
            Internal method to update the task list with the actual state of the server.
        """
        response = request(self.server.binding, "refactoringtasks", {})
        tasks=[]
        for jsonTask in response:
            tasks.append(RefactoringTask(self.server, self, jsonTask))
        self.tasks = tasks
        
    def execute(self, all = True):
        """
            Execute a task.
            If all is true, all tasks are executed.
        """
        if all:
            while True:
                cont = True
                for task in self.tasks:
                    if task.status == "Created":
                        cont = False
                if cont:
                    return
                self.execute(all=False)
        else:
            response = request(self.server.binding, "executetask", {})
            self.update()
            print(self)

    def __str__(self):
        """
            Display process as a string.
        """
        numberOfTasks= len(self.tasks)
        numberFinished = 0
        for task in self.tasks:
            if task.status=="Finished":
                numberFinished+=1
            
        return "refactoring ["+str(numberFinished)+"-"+str(numberOfTasks)+"]"
    
class MissingLink:
    """
        Object representing a missing link.
        
        Fields:
            server       - instance of the server object
            production   - the production of the missing link
            file_location- location of the file containing the missing link
            missing_file_location- location of the missing file
            file_id      - id of the file containing the missing link
            element_id   - id of the element in the file    
    """
    def __init__(self, server, production, json):
        """
            Initialize the MissingLink object.
        """
        self.server = server
        self.production = production
        self.file_location = json["file_location"]
        self.missing_file_location = json["missing_file_location"]
        self.file_id = json["file_id"]
        self.element_id = json["element_id"]
    
    def getPossibleMatches(self):
        """
            Get possibilities for the missing link.
        """
        response = request(self.server.binding, "missinglinksolutions", {"production_id":self.production.id, "element_id":self.element_id})
        result = []
        for jsonMatch in response:
            result.append(PossibleLink(self.server, self.production, self, jsonMatch))
        return result
        
    def __str__(self):
        """
            Display missing link as a string
        """
        return "Missing link: " +self.file_location+"=>"+self.missing_file_location

class PossibleLink:
    """
        Object representing a possible link to solve of a missing link.
        
        server - the server instance
        production - the production instance
        missinglink - the missinglink instance
        file_id - the file id where the missing link can be linked to 
        element_id - id of the element in the file
        file_name - the name of the file
        file_location - the relative location of the file
        match - how likely the link is
    """
    def __init__(self, server, production, missinglink, json):
        """
            Initialize the PossibleLink object.
        """
        self.server = server
        self.production = production
        self.missinglink = missinglink
        self.file_id = json["file_id"]
        self.element_id = json["element_id"]
        self.file_name = json["file_name"]
        self.file_location = json["file_location"]
        self.match = json["match"]
        
    def fix(self, execute=True):
        """
            Fix the missing link by applying this link.
            
            Execute -- boolean indicating if the refactoring process will be
                    executed immediatly by this call
        """
        response = request(self.server.binding, "solvemissinglink", {"production_id":self.id, "file_id":self.file_id, "element_id":self.element_id})
        
        if len(response) > 0 :
            raise BlenderAidException(response[0]["message"]) 
        elif execute :
            return RefactoringProcess(self.server).execute()
        else:
            return RefactoringProcess(self.server)
        
    def __str__(self):
        """
            Display the object PossibleLink as a string.
        """
        return "Match: "+self.file_location+" "+str(self.match)

class Production:
    """
        Object representing a production.
        
        Fields:
            server  - instance of the server object
            id      - id of the production (key)
            name    - name of the production
            location- absolute path to the root of the production on the filesystem
            svnUrl      - SVN url of the production
            svnUserid   - SVN userid
            svnPassword - SVN password
            active  - is this the actice production
    """
    def __init__(self, server, jsonProduction):
        """
            Initialize the Production object.
        """
        self.server=server
        self.id=jsonProduction["production_id"]
        self.name=jsonProduction["production_name"]
        self.location=jsonProduction["production_location"]
        self.active=jsonProduction["production_active"]
        self.svnUrl=jsonProduction["production_svnurl"]
        self.svnUserid=jsonProduction["production_svnuserid"]
        self.svnPassword=jsonProduction["production_svnpassword"]

    def getMissingLinks(self):
        """
            Returns a list of missing links in the production.
        """
        response = request(self.server.binding, "productionview", {"production_id":self.id})
        result = []
        
        for jsonLink in response[3]:
            result.append(MissingLink(self.server, self, jsonLink))

        return result        
        
    def getFiles(self, name=None, location=None):
        """
            Get a list of the files in the production. The list is filtered 
            with the given name and location.
            
            Parameters:
                name    - part of the filename to be include in the list
                location- part of the location of the file to be included in the 
                        list
        """
        response = request(self.server.binding, "productionview", {"production_id":self.id})
        result = []
        
        for jsonFile in response[1]:
            add = True
            if name is not None and jsonFile["file_name"].find(name) == -1:
                add = False
            if location is not None and jsonFile["file_location"].find(location) == -1:
                add = False

            if add:
                result.append(File(self.server, self, jsonFile))

        return result        

    def getDirectories(self):
        """
            Get a list of directories in the production. Empty directories are 
            always excluded in the result.
        """
        files = getFiles(self)
        directorynames = []
        for file in files:
            directoryname = file.getDirectoryName()
            if directoryname not in directorynames:
                directorynames.append(directoryname)
        result = []
        
        for directoryname in directorynames:
            result.append(Directory(self.server, self, directoryname))

        return result

    def activate(self):
        """
            Activate this production (make the production the current active
            production. Usable for easy retrieval.
            
            A production must be active in order to perform a refactoring task.
        """
        response = request(self.server.binding, "activateproduction", {"production_id":self.id})
        return None;
    
    def __str__(self):
        """
            Display the object Production as a string.
        """
        return "Production: "+self.name

class File:
    """
        Object representing a file.
        
        Fields:
            server      - instance of the server object
            production  - Production where this file is part of            
            id          - id of the file (key)
            location    - relative location from the production location of this
                file including the filename
            name        - name of the file
            
    """
    def __init__(self, server, production, json):
        """
            Initialize the File object.
        """
        self.server = server
        self.production = production
        self.id=json["file_id"]
        self.location=json["file_location"]
        self.name=json["file_name"]
        
    def getElements(self, name=None, type=None):
        """
            Get a list of elements of this file.
            
            Parameters:
                name -- name filter to use
                type -- type filter to use
            
            Returns:
                Array of elements.
        """
        response = request(self.server.binding,"fileview", {"production_id":self.production.id, "file_id":self.id})
        result = []
        for elementjson in response[2]:
            element = Element(self.server, self.production, self.file, elementjson)
            add = True
            if name is not None and element.name.find(name) == -1:
                add = False
            if type is not None and element.type != type:
                add = False
            
            if add:   
                result.append(element)

        return result
        
    def getReferences(self, referencedBy=False):
        """
            Get all the references of the file.
            
            Parameter:
                referencedBy - if true, only the references towards the file 
                             are returned,
                             if false, only the references from the file (towards
                             other files) are returned.
            
            Returns:
                Array of references.
        """
        response = request(self.server.binding,"fileview", {"production_id":self.production.id, "file_id":self.id})
        result = []
        for elementjson in response[(3,4)[referencedBy]]:
            ref = Reference(elementjson)
            result.append(ref)
            
        return result

    def rename(self, newFilename, execute=True):
        """
            Rename a file. 
            
            Parameters:
                newFilename - new name of the file
                execute: if true, perform renaming along with method call,
                         if false, don not perform the renaming.
            Returns:
                Refactoringprocess object or an exception.
        """
        response = request(self.server.binding, "renamefile", {"file_id":self.id, "new_filename":newFilename})
        if len(response) > 0 :
            raise BlenderAidException(response[0]["message"]) 
        elif execute :
            return RefactoringProcess(self.server).execute()
        else:
            return RefactoringProcess(self.server)

    def move(self, newLoation, execute=True):
        """
            Move a file.
            
            Parameters:
                newLoation - the target directory 
                execute   - if true, perform move along with method call,
                            if false, do not perform the move.
            
            Returns:
                Refactoringprocess object or an exception.
        """
        response = request(self.server.binding, "movefile", {"file_id":self.id, "new_location":newLoation})
        if len(response) > 0 :
            raise BlenderAidException(response[0]["message"]) 
        elif execute :
            return RefactoringProcess(self.server).execute()
        else:
            return RefactoringProcess(self.server)

    def getDirectoryName(self):
        """
            Returns the production relative path of the directory where the file is located.
        """
        return os.path.dirname(self.location)
    
    def getDirectory(self):
        """
            Get the directory where this file is located.
        """
        return Directory(self.server, self.production, self.getDirectoryName())
        
    def __str__(self):
        """
            Display the object File as a string.
        """
        return "File: "+self.location

class Directory:
    """
        object representing a directory
        
        fields:
            production -- production where this directory is part of
            location -- the full directory name (including parent directory)
                    from the roor location of the production
            server -- the Server object what is used to retrieve this object
    """
    def __init__(self, server, production, location):
        """
            Initialize the Directory object.
        """
        self.server = server
        self.production = production
        self.location = location

    def rename(self, targetDirname, execute=True):
        """
            Rename the directory.
            
            Parameters:
                targetDirname - target directory name
                execute   - if true, perform move along with method call,
                            if false, do not perform the move.
            
            Returns:
                Refactoringprocess object or an exception.
        """
        response = request(self.server.binding, "renamedir", {"production_id":self.id, "source_directory":self.location, "target_directory_name":targetDirname})
        
        if len(response) > 0 :
            raise BlenderAidException(response[0]["message"]) 
        elif execute :
            return RefactoringProcess(self.server).execute()
        else:
            return RefactoringProcess(self.server)

    def move(self, targetDirname, execute=True):
        """
            Move the directory.
            
            Parameters:
                targetDirname - target directory name
                execute   - if true, perform move along with method call,
                            if false, do not perform the move.
            
            Returns:
                Refactoringprocess object or an exception.
        """
        response = request(self.server.binding, "movedir", {"production_id":self.id, "source_directory":self.location, "target_directory":targetDirname})
        if len(response) > 0 :
            raise BlenderAidException(response[0]["message"]) 
        elif execute :
            return RefactoringProcess(self.server).execute()
        else:
            return RefactoringProcess(self.server)

    def getFiles(self):
        """
            Retrieve all files inside this directory (including subdirectories)
            
            Returns:
                Array of files.
        """
        files = self.production.getFiles()
        result = []
        for file in files:
            if file.location.startswith(self.location):
                result.append(file)
        return result

class Element:
    """
        Object representing an element.
    """
    def __init__(self, server, production, file, json):
        """
            Initialize the Element object.
        """
        self.server = server
        self.production = production
        self.file = file
        self.id = json["element_id"]
        self.name = json["element_name"]
        self.type = json["element_type"]

    def rename(self, newName, execute=True):
        """
            Rename this element to newName.
            
            Parameters:
                newName   - new name of the element
                execute   - if true, perform move along with method call,
                            if false, do not perform the move.
            
            Returns:
                Refactoringprocess object or an exception.
        """
        response = request(self.server.binding, "renameelement", {"file_id":self.file.id, "element_id":self.id, "new_name":newFilename})
        if len(response) > 0 :
            raise BlenderAidException(response[0]["message"]) 
        elif execute :
            return RefactoringProcess(self.server).execute()
        else:
            return RefactoringProcess(self.server)
        
    def getReferencesTo(self):
        """
            Return a list with all references to this specific element.
        """
        response = request(self.server.binding,"fileview", {"production_id":self.production.id, "file_id":self.file.id})
        result = []
        for elementjson in response[4]:
            if self.name == elementjson["element_name"]:
                ref = Reference(elementjson)
                result.append(ref)
            
        return result
    
class Reference:
    """
        Object representing a reference (link between files).
    """
    def __init__(self, json):
        """
            Initialize the Reference object.
        """
        self.file_id = json["file_id"]
        self.file_location = json["file_location"]
        self.element_name = json["element_name"]
        self.element_type = json["element_type"]
